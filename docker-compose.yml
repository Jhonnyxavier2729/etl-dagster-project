services:
  # Dagster como orquestador
  dagster:
    build:
      context: ./dagster/infra  # ← Contexto DONDE está el Dockerfile y requirements.txt
      dockerfile: Dockerfile  # ← Nombre del archivo (está en el mismo directorio)
    container_name: dagster-orchestrator
    volumes:
      - ./dagster:/opt/dagster/app 
      - ./data:/data
      - ./duckdb:/duckdb
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "3000:3000"
    environment:
      - DAGSTER_HOME=/opt/dagster/app/metadata
      - DAGSTER_DAGIT_HOST=0.0.0.0
      - DAGSTER_DAGIT_PORT=3000
      - DAGSTER_PG_HOST=postgres-dagster
      - DAGSTER_PG_DB=dagster_metadata
      - DAGSTER_PG_USER=dagster
      - DAGSTER_PG_PASSWORD=dagster_pass
      - DAGSTER_PG_PORT=5432
    command: >
      sh -c "nohup dagster-daemon run --python-file /opt/dagster/app/definitions.py > /opt/dagster/app/dagster-daemon.log 2>&1 &
         dagster-webserver -h 0.0.0.0 -p 3000 -w /opt/dagster/app/infra/workspace.yaml"
    depends_on:
      postgres-dagster:
        condition: service_healthy
      postgres-db:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - etl-network
    restart: unless-stopped

  # Worker ETL con Python 3.11
  etl-worker:
    build:
      context: ./etl-worker
      dockerfile: Dockerfile
    container_name: etl-worker
    volumes:
      - ./data:/data
      - ./duckdb:/duckdb
    networks:
      - etl-network
    environment:
      - PYTHONUNBUFFERED=1
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      postgres-db:
        condition: service_healthy
      mongodb:
        condition: service_healthy

  # PostgreSQL para METADATA de DAGSTER
  postgres-dagster:
    image: postgres:16
    container_name: postgres-dagster
    environment:
      POSTGRES_DB: dagster_metadata
      POSTGRES_USER: dagster
      POSTGRES_PASSWORD: dagster_pass
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    volumes:
      - postgres-dagster-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - etl-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dagster -d dagster_metadata"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # PostgreSQL 16 para DATOS ETL
  postgres-db:
    image: postgres:16
    container_name: postgres-db
    environment:
      POSTGRES_DB: etl_database
      POSTGRES_USER: etl_user
      POSTGRES_PASSWORD: etl_password_2024
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - etl-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U etl_user -d etl_database"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # MongoDB 7
  mongodb:
    image: mongo:7
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: mongo_password_2024
      MONGO_INITDB_DATABASE: etl_database
    volumes:
      - mongodb-data:/data/db
    ports:
      - "27017:27017"
    networks:
      - etl-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/test --quiet"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 15s

volumes:
  postgres-data:
    driver: local
  postgres-dagster-data:
    driver: local
  mongodb-data:
    driver: local

networks:
  etl-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
